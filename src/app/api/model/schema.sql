-- Database: Your_AI_Assistant_Auth_DB
-- This script creates the essential tables for authentication and Google OAuth integration
-- when using NextAuth.js with a MySQL database.

-- -----------------------------------------------------
-- Table `users`
-- Stores core user profiles. Managed by NextAuth.js.
-- This table represents the unique users within your application.
-- -----------------------------------------------------
CREATE TABLE users (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Unique user ID (UUID) generated by NextAuth.js for your application''s internal use',
    name VARCHAR(255) NULL COMMENT 'User''s display name, typically from the OAuth provider (e.g., Google)',
    email VARCHAR(255) UNIQUE NOT NULL COMMENT 'User''s primary email address, typically from the OAuth provider (e.g., Google)',
    email_verified DATETIME NULL COMMENT 'Timestamp when the email was verified (e.g., via OAuth login)',
    image TEXT NULL COMMENT 'URL to user''s profile picture from the OAuth provider',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Timestamp when the user record was created',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Timestamp when the user record was last updated'
);

-- -----------------------------------------------------
-- Table `accounts`
-- Stores linked OAuth provider accounts and their tokens. Essential for NextAuth.js.
-- This table holds the access and refresh tokens for external services like Google,
-- which grant access to email and calendar APIs based on granted scopes.
-- -----------------------------------------------------
CREATE TABLE accounts (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Unique ID for this specific account link (UUID)',
    user_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the users table',
    type VARCHAR(255) NOT NULL COMMENT 'Type of account (e.g., ''oauth'', ''email'', ''credentials'')',
    provider VARCHAR(255) NOT NULL COMMENT 'The OAuth provider name (e.g., ''google'', ''azure-ad'')',
    provider_account_id VARCHAR(255) NOT NULL COMMENT 'The unique ID of the user from the OAuth provider (e.g., Google''s internal user ID)',
    refresh_token TEXT NULL COMMENT 'Encrypted refresh token from the OAuth provider, used to get new access tokens',
    access_token TEXT NULL COMMENT 'Encrypted access token from the OAuth provider, used for API calls',
    expires_at BIGINT NULL COMMENT 'Unix timestamp (seconds) when the access token expires',
    token_type VARCHAR(255) NULL COMMENT 'e.g., ''Bearer''',
    scope TEXT NULL COMMENT 'The specific scopes (permissions) granted for this provider connection (e.g., gmail.modify, calendar.events)',
    id_token TEXT NULL COMMENT 'The ID Token from OAuth (JWT), if provided by the provider',
    session_state VARCHAR(255) NULL COMMENT 'For OAuth 2.0 state management',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    -- Ensures a user can only link one account per specific provider_account_id
    CONSTRAINT unique_provider_account UNIQUE (provider, provider_account_id),
    
    -- Foreign key constraint to link to the users table.
    -- If a user is deleted, their linked accounts are also deleted.
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- Indexes for efficient lookup of accounts by user_id or by provider details
    INDEX idx_accounts_user_id (user_id),
    INDEX idx_accounts_provider_account (provider, provider_account_id)
);

-- -----------------------------------------------------
-- Table `sessions`
-- Stores active user sessions. Managed by NextAuth.js.
-- This is used to maintain a user's logged-in state.
-- -----------------------------------------------------
CREATE TABLE sessions (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Unique ID for the session record (UUID)',
    session_token VARCHAR(255) UNIQUE NOT NULL COMMENT 'The unique token used to identify the session',
    user_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the users table',
    expires DATETIME NOT NULL COMMENT 'Timestamp when the session expires',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    -- Foreign key constraint to link to the users table.
    -- If a user is deleted, their active sessions are also deleted.
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- Index for efficient lookup of sessions by user_id
    INDEX idx_sessions_user_id (user_id)
);