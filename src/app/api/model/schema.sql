-- Database: Your_AI_Assistant_Auth_DB
-- This script creates the essential tables for authentication and Google OAuth integration
-- when using NextAuth.js with a MySQL database.

-- -----------------------------------------------------
-- Table `users`
-- Stores core user profiles. Managed by NextAuth.js.
-- This table represents the unique users within your application.
-- -----------------------------------------------------
CREATE TABLE users (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Unique user ID (UUID) generated by NextAuth.js for your application''s internal use',
    name VARCHAR(255) NULL COMMENT 'User''s display name, typically from the OAuth provider (e.g., Google)',
    email VARCHAR(255) UNIQUE NOT NULL COMMENT 'User''s primary email address, typically from the OAuth provider (e.g., Google)',
    email_verified DATETIME NULL COMMENT 'Timestamp when the email was verified (e.g., via OAuth login)',
    image TEXT NULL COMMENT 'URL to user''s profile picture from the OAuth provider',
    last_synced_at DATETIME NULL COMMENT 'Last time user data was polled for new emails/events',
    has_synced BOOLEAN DEFAULT FALSE COMMENT 'Whether the user has completed initial sync',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Timestamp when the user record was created',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Timestamp when the user record was last updated'
);

-- -----------------------------------------------------
-- Table `accounts`
-- Stores linked OAuth provider accounts and their tokens. Essential for NextAuth.js.
-- This table holds the access and refresh tokens for external services like Google,
-- which grant access to email and calendar APIs based on granted scopes.
-- -----------------------------------------------------
CREATE TABLE accounts (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Unique ID for this specific account link (UUID)',
    user_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the users table',
    type VARCHAR(255) NOT NULL COMMENT 'Type of account (e.g., ''oauth'', ''email'', ''credentials'')',
    provider VARCHAR(255) NOT NULL COMMENT 'The OAuth provider name (e.g., ''google'', ''azure-ad'')',
    provider_account_id VARCHAR(255) NOT NULL COMMENT 'The unique ID of the user from the OAuth provider (e.g., Google''s internal user ID)',
    refresh_token TEXT NULL COMMENT 'Encrypted refresh token from the OAuth provider, used to get new access tokens',
    access_token TEXT NULL COMMENT 'Encrypted access token from the OAuth provider, used for API calls',
    expires_at BIGINT NULL COMMENT 'Unix timestamp (seconds) when the access token expires',
    token_type VARCHAR(255) NULL COMMENT 'e.g., ''Bearer''',
    scope TEXT NULL COMMENT 'The specific scopes (permissions) granted for this provider connection (e.g., gmail.modify, calendar.events)',
    id_token TEXT NULL COMMENT 'The ID Token from OAuth (JWT), if provided by the provider',
    session_state VARCHAR(255) NULL COMMENT 'For OAuth 2.0 state management',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    -- Ensures a user can only link one account per specific provider_account_id
    CONSTRAINT unique_provider_account UNIQUE (provider, provider_account_id),
    
    -- Foreign key constraint to link to the users table.
    -- If a user is deleted, their linked accounts are also deleted.
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- Indexes for efficient lookup of accounts by user_id or by provider details
    INDEX idx_accounts_user_id (user_id),
    INDEX idx_accounts_provider_account (provider, provider_account_id)
);

-- -----------------------------------------------------
-- Table `sessions`
-- Stores active user sessions. Managed by NextAuth.js.
-- This is used to maintain a user's logged-in state.
-- -----------------------------------------------------
CREATE TABLE sessions (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Unique ID for the session record (UUID)',
    session_token VARCHAR(255) UNIQUE NOT NULL COMMENT 'The unique token used to identify the session',
    user_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the users table',
    expires DATETIME NOT NULL COMMENT 'Timestamp when the session expires',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    -- Foreign key constraint to link to the users table.
    -- If a user is deleted, their active sessions are also deleted.
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- Index for efficient lookup of sessions by user_id
    INDEX idx_sessions_user_id (user_id)
);

-- -----------------------------------------------------
-- Table `user_emails`
-- Stores basic metadata about ingested user emails.
-- This is part of the initial data ingestion for AI context.
-- -----------------------------------------------------
CREATE TABLE user_emails (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Your internal unique ID for the email (UUID)',
    user_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the users table',
    provider_email_id VARCHAR(255) NOT NULL COMMENT 'The email''s ID from Google/Outlook (e.g., Gmail''s message ID)',
    thread_id VARCHAR(255) NULL COMMENT 'The thread ID from the provider',
    from_email VARCHAR(255) NULL COMMENT 'Sender''s email address',
    to_emails JSON NULL COMMENT 'JSON array of recipient email addresses',
    cc_emails JSON NULL COMMENT 'JSON array of CC recipient email addresses',
    bcc_emails JSON NULL COMMENT 'JSON array of BCC recipient email addresses',
    subject VARCHAR(500) NULL COMMENT 'Email subject line',
    snippet TEXT NULL COMMENT 'A short preview/snippet of the email body',
    internal_date DATETIME NULL COMMENT 'The internal date/time from the email provider',
    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Timestamp when your system ingested this email',
    is_read BOOLEAN DEFAULT FALSE COMMENT 'Whether the email is marked as read',
    label_ids JSON NULL COMMENT 'JSON array of label IDs (e.g., ''INBOX'', ''SENT'', ''STARRED'')',
    status ENUM('active', 'archived', 'trashed', 'deleted') DEFAULT 'active' COMMENT 'Current status of the email in the mailbox',
    raw_body_hash VARCHAR(64) NULL COMMENT 'SHA256 hash of the full email body to detect changes (optional)',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT unique_user_provider_email UNIQUE (user_id, provider_email_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_user_emails_user_id (user_id),
    INDEX idx_user_emails_provider_id (provider_email_id),
    INDEX idx_user_emails_thread_id (thread_id),
    INDEX idx_user_emails_internal_date (internal_date)
);

-- -----------------------------------------------------
-- Table `user_calendar_events`
-- Stores basic metadata about ingested user calendar events.
-- This is part of the initial data ingestion for AI context.
-- -----------------------------------------------------
CREATE TABLE user_calendar_events (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Your internal unique ID for the event (UUID)',
    user_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the users table',
    provider_event_id VARCHAR(255) NOT NULL COMMENT 'The event''s ID from Google/Outlook',
    calendar_id VARCHAR(255) NOT NULL COMMENT 'The ID of the calendar it belongs to',
    summary VARCHAR(500) NULL COMMENT 'Event title/summary',
    description TEXT NULL COMMENT 'Event description',
    start_time DATETIME NOT NULL COMMENT 'Event start time',
    end_time DATETIME NOT NULL COMMENT 'Event end time',
    location VARCHAR(500) NULL COMMENT 'Event location',
    attendees JSON NULL COMMENT 'JSON array of attendee emails and their response statuses',
    status ENUM('confirmed', 'tentative', 'cancelled') NOT NULL COMMENT 'Event status',
    html_link TEXT NULL COMMENT 'Link to the event in the provider''s calendar (e.g., Google Calendar HTML link)',
    ingested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Timestamp when your system ingested this event',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT unique_user_provider_event UNIQUE (user_id, provider_event_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_user_calendar_events_user_id (user_id),
    INDEX idx_user_calendar_events_provider_id (provider_event_id),
    INDEX idx_user_calendar_events_start_time (start_time),
    INDEX idx_user_calendar_events_end_time (end_time)
);

-- -----------------------------------------------------
-- Table `user_preferences`
-- Stores user preferences and settings.
-- -----------------------------------------------------
CREATE TABLE user_preferences (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Unique ID for the preference (UUID)',
    user_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the users table',
    preference_key VARCHAR(255) NOT NULL COMMENT 'The preference key/name',
    preference_value TEXT NULL COMMENT 'The preference value (can be JSON for complex data)',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Timestamp when the preference was created',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Timestamp when the preference was last updated',

    CONSTRAINT unique_user_preference_key UNIQUE (user_id, preference_key),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_user_preferences_user_id (user_id),
    INDEX idx_user_preferences_key (preference_key)
);

-- -----------------------------------------------------
-- Table `cleanup_suggestions`
-- Stores AI-generated cleanup suggestions for user emails.
-- -----------------------------------------------------
CREATE TABLE cleanup_suggestions (
    id VARCHAR(36) PRIMARY KEY COMMENT 'Unique ID for the suggestion (UUID)',
    user_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the users table',
    email_id VARCHAR(36) NOT NULL COMMENT 'Foreign key linking to the user_emails table',
    provider_email_id VARCHAR(255) NOT NULL COMMENT 'The email''s ID from Google/Outlook',
    from_email VARCHAR(255) NULL COMMENT 'Sender''s email address',
    subject VARCHAR(500) NULL COMMENT 'Email subject line',
    snippet TEXT NULL COMMENT 'A short preview/snippet of the email body',
    reason VARCHAR(500) NOT NULL COMMENT 'Reason for the cleanup suggestion',
    suggested_action ENUM('archive', 'trash', 'delete_permanently') NOT NULL COMMENT 'Suggested cleanup action',
    status ENUM('pending', 'approved', 'rejected', 'executed') DEFAULT 'pending' COMMENT 'Current status of the suggestion',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Timestamp when the suggestion was created',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Timestamp when the suggestion was last updated',

    CONSTRAINT unique_user_email_suggestion UNIQUE (user_id, email_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (email_id) REFERENCES user_emails(id) ON DELETE CASCADE,
    INDEX idx_cleanup_suggestions_user_id (user_id),
    INDEX idx_cleanup_suggestions_status (status),
    INDEX idx_cleanup_suggestions_created_at (created_at)
);